from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.database.queues.get_bids_by_city import get_bids_by_city
from app.database.queues.get_user_by_id import get_user_by_id
from app.database.queues.post_response import post_response

from app.scripts.send_response import send_response

from app.keyboards.cities import cities_keyboard


search_bids_router = Router()


class SearchBids(StatesGroup):
    city = State()
    selection = State()


@search_bids_router.callback_query(F.data == 'search_bids')
async def search_bids_callback_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SearchBids.city)

    content = '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ ‚è¨'

    await callback.message.answer(content, reply_markup=cities_keyboard())


@search_bids_router.callback_query(SearchBids.city)
async def search_bids_city_handler(callback: CallbackQuery, state: FSMContext):
    bids = get_bids_by_city(callback.data)

    if bids:
        for bid in bids:
            customer = get_user_by_id(bid['customer_telegram_id'])
            customer_full_name = customer[2]

            if bid['instrument_provided'] == 1:
                bid['instrument_provided'] = '–î–∞'
            elif bid['instrument_provided'] == 0:
                bid['instrument_provided'] = '–ù–µ—Ç'

            content = f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <u>{bid["id"]}</u>\n' \
                f'<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> <i>{customer_full_name}</i>\n' \
                f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {bid["description"]}\n' \
                f'<b>–î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É:</b> <i>{bid["deadline"]}</i>\n' \
                f'<b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <i>{
                    bid["instrument_provided"]}</i>'

            await state.set_state(SearchBids.selection)

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è üñêÔ∏è',
                                             callback_data=str(bid['id']))
                    ]
                ]
            )

            await callback.message.answer(content, parse_mode='HTML', reply_markup=keyboard)
    else:
        await state.clear()

        content = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üôÅ'

        await callback.message.answer(content)


@search_bids_router.callback_query(SearchBids.selection)
async def search_bids_selection_handler(callback: CallbackQuery, state: FSMContext):
    response = post_response(callback.data, int(callback.from_user.id))

    if response == False:
        content = '–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑!'

        await callback.message.answer(content)
    elif response == None:
        content = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üôÅ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'

        await callback.message.answer(content)
    else:
        send_response(callback.data)

        content = f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{callback.data}!\n' \
            '–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –í–∞—à–µ–º –æ—Ç–∫–ª–∏–∫–µ.'

        await callback.message.answer(content)
