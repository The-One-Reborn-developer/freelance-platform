from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.database.queues.get_bids_by_city import get_bids_by_city
from app.database.queues.get_user_by_id import get_user_by_id
from app.database.queues.post_response import post_response
from app.tasks.celery_app import get_all_customer_chats_task
from app.tasks.celery_app import get_bid_by_id_task
from app.database.queues.get_responses_by_id import get_responses_by_id

from app.scripts.send_response import send_response
from app.scripts.get_chat import get_chat

from app.keyboards.cities import cities_keyboard


search_bids_router = Router()


class SearchBids(StatesGroup):
    city = State()
    selection = State()
    chat = State()


@search_bids_router.callback_query(F.data == 'search_bids')
async def search_bids_callback_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SearchBids.city)

    content = '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ ‚è¨'

    await callback.message.answer(content, reply_markup=cities_keyboard())


@search_bids_router.callback_query(SearchBids.city)
async def search_bids_city_handler(callback: CallbackQuery, state: FSMContext):
    bids = get_bids_by_city(callback.data)

    if bids:
        for bid in bids:
            customer = get_user_by_id(bid['customer_telegram_id'])
            customer_full_name = customer[2]

            if bid['instrument_provided'] == 1:
                bid['instrument_provided'] = '–î–∞'
            elif bid['instrument_provided'] == 0:
                bid['instrument_provided'] = '–ù–µ—Ç'

            content = f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <u>{bid["id"]}</u>\n' \
                      f'<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> <i>{customer_full_name}</i>\n' \
                      f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {bid["description"]}\n' \
                      f'<b>–î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É:</b> <i>{bid["deadline"]}</i>\n' \
                      f'<b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <i>{bid["instrument_provided"]}</i>'

            await state.set_state(SearchBids.selection)

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è üñêÔ∏è',
                                             callback_data=str(bid['id']))
                    ],
                    [
                        InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ üì®',
                                             callback_data=f'look_customer_chats_{bid["customer_telegram_id"]}')
                    ]
                ]
            )

            await callback.message.answer(content, parse_mode='HTML', reply_markup=keyboard)
    else:
        content = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üôÅ'

        await callback.message.answer(content)


@search_bids_router.callback_query(SearchBids.selection)
async def search_bids_selection_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('look_customer_chats'):
        await state.set_state(SearchBids.chat)

        customer_telegram_id = callback.data.split('_')[3]

        chats_ids = get_all_customer_chats_task.delay(customer_telegram_id).get()
        
        if chats_ids:
            for chat_id in chats_ids:
                bid_id = int(chat_id)
                city = get_bid_by_id_task.delay(bid_id).get()[2]
                description = get_bid_by_id_task.delay(bid_id).get()[3]
                deadline = get_bid_by_id_task.delay(bid_id).get()[4]
                instrument_provided = get_bid_by_id_task.delay(bid_id).get()[5]
                if instrument_provided == 1:
                    instrument_provided = '–î–∞'
                else:
                    instrument_provided = '–ù–µ—Ç'
                closed = get_bid_by_id_task.delay(bid_id).get()[6]
                if closed == 1:
                    closed = '–í—ã–ø–æ–ª–Ω–µ–Ω'
                else:
                    closed = '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'

                content = f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <u>{bid_id}</u>\n' \
                          f'<b>–ì–æ—Ä–æ–¥:</b> <i>{city}</i>\n' \
                          f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n' \
                          f'<b>–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:</b> <i>{deadline}</i>\n' \
                          f'<b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <i>{instrument_provided}</i>\n' \
                          f'<b>–°—Ç–∞—Ç—É—Å:</b> <i>{closed}</i>\n\n' \

                responses = get_responses_by_id(bid_id)

                if responses:
                    for response in responses:
                        performer_telegram_id = response['performer_telegram_id']
                        performer_full_name = response['performer_full_name']
                        performer_rate = response['performer_rate']
                        performer_experience = response['performer_experience']

                        content += f'<b>–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è:</b> <i>{performer_full_name}</i>\n' \
                                   f'<b>–°—Ç–∞–≤–∫–∞:</b> <i>{performer_rate}</i>\n' \
                                   f'<b>–°—Ç–∞–∂:</b> <i>{performer_experience}</i>'

                        keyboard = InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ üì®',
                                                            callback_data=f'look_customer_chat_{bid_id}_{customer_telegram_id}_{performer_telegram_id}')
                                ]
                            ]
                        )
                        
                        await callback.message.answer(content, parse_mode='HTML', reply_markup=keyboard)
    else:
        performer = get_user_by_id(callback.from_user.id)

        response = post_response(callback.data,
                                performer[1],
                                performer[2],
                                performer[5],
                                performer[6])

        if response == False:
            content = '–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑!'

            await callback.message.answer(content)
        elif response == None:
            content = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üôÅ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'

            await callback.message.answer(content)
        else:
            send_response(callback.data)

            content = f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{callback.data}!\n' \
                '–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –í–∞—à–µ–º –æ—Ç–∫–ª–∏–∫–µ.'

            await callback.message.answer(content)


@search_bids_router.callback_query(SearchBids.chat)
async def look_bids_write_to_performer_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('look_customer_chat_'):
        bid_id = callback.data.split('_')[3]
        customer_telegram_id = callback.data.split('_')[4]
        performer_telegram_id = callback.data.split('_')[5]

        response = get_chat(bid_id,
                            customer_telegram_id,
                            performer_telegram_id)
        
        if response:
            messages = [msg.strip() for msg in response.split("---") if msg.strip()]
            for message in messages:
                if "video_file_id:" in message:
                    lines = message.split("\n")
                    text_lines = []
                    video_file_id = None

                    for line in lines:
                        if line.startswith("video_file_id:"):
                            video_file_id = line.split(":", 1)[1].strip()
                        else:
                            text_lines.append(line.strip())
                    
                    caption = "\n".join(text_lines)
                    
                    await callback.message.answer_video(video=video_file_id, caption=caption)
                else:
                    await callback.message.answer(message)
        else:
            await callback.message.answer("–ß–∞—Ç –ø–æ–∫–∞ –ø—É—Å—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")