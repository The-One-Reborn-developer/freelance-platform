from aiogram import Router, F
from aiogram.types import (Message,
                           CallbackQuery,
                           InlineKeyboardButton,
                           InlineKeyboardMarkup)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.database.queues.get_bids_by_id import get_bids_by_id
from app.database.queues.get_user_by_id import get_user_by_id
from app.database.queues.close_bid import close_bid
from app.database.queues.get_responses_by_id import get_responses_by_id
from app.database.queues.put_response import put_response

from app.scripts.save_customer_chat_message import save_customer_chat_message

from app.keyboards.menu import customer_menu_keyboard


look_bids_router = Router()


class LookBids(StatesGroup):
    selection = State()
    write_to_performer = State()
    message = State()


@look_bids_router.callback_query(F.data == 'look_bids')
async def look_bids_callback_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(LookBids.selection)

    bids = get_bids_by_id(callback.from_user.id)

    if bids:
        for bid in bids:
            if bid['instrument_provided'] == 1:
                bid['instrument_provided'] = '–î–∞'
            elif bid['instrument_provided'] == 0:
                bid['instrument_provided'] = '–ù–µ—Ç'
            
            content = f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <u>{bid["id"]}</u>\n' \
                      f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {bid["description"]}\n' \
                      f'<b>–î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É:</b> <i>{bid["deadline"]}</i>\n' \
                      f'<b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <i>{bid["instrument_provided"]}</i>'
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏',
                                             callback_data=f'look_responses_{bid["id"]}'),
                    ],
                    [
                        InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–∏ÃÜ ‚úÖ',
                                             callback_data=f'close_bid_{bid["id"]}')
                    ]
                ]
            )

            await callback.message.answer(content, parse_mode='HTML', reply_markup=keyboard)
    else:
        content = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üôÇ'

        await callback.message.answer(content)


@look_bids_router.callback_query(LookBids.selection)
async def look_bids_selection_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('close_bid_'):
        bid_id = callback.data.split('_')[2]
        
        bid_closed = close_bid(int(bid_id))

        if bid_closed:
            user = get_user_by_id(callback.from_user.id)
            content = f'–ó–∞–∫–∞–∑ ‚Ññ{bid_id} –∑–∞–∫—Ä—ã—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–∏ÃÜ ‚úÖ'
            
            await callback.message.answer(content)
        elif not bid_closed:
            content = f'–ó–∞–∫–∞–∑ ‚Ññ{bid_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–∏ÃÜ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.'
            
            await callback.message.answer(content)
        else:
            content = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üôÅ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            
            await callback.message.answer(content)
    elif callback.data.startswith('look_responses_'):
        await state.set_state(LookBids.write_to_performer)

        bid_id = callback.data.split('_')[2]

        responses = get_responses_by_id(bid_id)

        if responses:
            for response in responses:
                content = f'<b>–û—Ç–∫–ª–∏–∫:</b> <u>{response["id"]}</u>\n' \
                          f'<b>–ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> {response["performer_full_name"]}\n' \
                          f'<b>–°—Ç–∞–≤–∫–∞:</b> {response["performer_rate"]}\n' \
                          f'<b>–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö:</b> {response["performer_experience"]}'
                
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫—É ‚úâÔ∏è',
                                                 callback_data=f'write_to_performer_{response["performer_telegram_id"]}_{bid_id}'),
                        ]
                    ]
                )

                await callback.message.answer(content, parse_mode='HTML', reply_markup=keyboard)
        else:
            content = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ üôÇ'

            await callback.message.answer(content)


@look_bids_router.callback_query(LookBids.write_to_performer)
async def look_bids_write_to_performer_handler(callback: CallbackQuery, state: FSMContext):
    performer_telegram_id = callback.data.split('_')[3]
    performer_chat_id = get_user_by_id(performer_telegram_id)[7]

    bid_id = callback.data.split('_')[4]

    await state.update_data(performer_telegram_id=performer_telegram_id,
                            performer_chat_id=performer_chat_id,
                            bid_id=bid_id)
    await state.set_state(LookBids.message)

    content = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.'

    await callback.message.answer(content)


@look_bids_router.message(LookBids.message)
async def look_bids_write_to_performer_handler(message: Message, state: FSMContext):
    data = await state.get_data()

    performer_chat_id = data['performer_chat_id']
    customer_full_name = get_user_by_id(message.from_user.id)[2]

    bid_id = data['bid_id']

    put_response(bid_id=bid_id,
                 performer_telegram_id=data['performer_telegram_id'],
                 chat_started=True)

    message_content = f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞ {customer_full_name}:\n\n{message.text}'

    await message.bot.send_message(chat_id=performer_chat_id,
                                   text=message_content)
    
    customer_telegram_id = get_user_by_id(message.from_user.id)[1]
    performer_telegram_id = data['performer_telegram_id']
    performer_full_name = get_user_by_id(performer_telegram_id)[2]

    save_customer_chat_message(bid_id,
                               customer_telegram_id,
                               performer_telegram_id,
                               customer_full_name,
                               performer_full_name,
                               message.text)
    
    content = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'

    await state.clear()

    await message.answer(content, reply_markup=customer_menu_keyboard())