from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.database.queues.get_bids_by_id import get_bids_by_id
from app.database.queues.get_user_by_id import get_user_by_id
from app.database.queues.close_bid import close_bid


look_bids_router = Router()


class LookBids(StatesGroup):
    selection = State()


@look_bids_router.callback_query(F.data == 'look_bids')
async def look_bids_callback_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(LookBids.selection)

    bids = get_bids_by_id(callback.from_user.id)

    if bids:
        for bid in bids:
            if bid['instrument_provided'] == 1:
                bid['instrument_provided'] = '–î–∞'
            elif bid['instrument_provided'] == 0:
                bid['instrument_provided'] = '–ù–µ—Ç'
            
            content = f'<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <u>{bid["id"]}</u>\n' \
                      f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {bid["description"]}\n' \
                      f'<b>–î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É:</b> <i>{bid["deadline"]}</i>\n' \
                      f'<b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</b> <i>{bid["instrument_provided"]}</i>'
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏',
                                             callback_data=f'look_responses_{bid["id"]}'),
                    ],
                    [
                        InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–∏ÃÜ ‚úÖ',
                                             callback_data=f'close_bid_{bid["id"]}')
                    ]
                ]
            )

            await callback.message.answer(content, parse_mode='HTML', reply_markup=keyboard)
    else:
        content = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üôÇ'

        await callback.message.answer(content)


@look_bids_router.callback_query(LookBids.selection)
async def look_bids_selection_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('close_bid_'):
        bid_id = callback.data.split('_')[2]
        
        bid_closed = close_bid(int(bid_id))

        if bid_closed:
            user = get_user_by_id(callback.from_user.id)
            content = f'–ó–∞–∫–∞–∑ ‚Ññ{bid_id} –∑–∞–∫—Ä—ã—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–∏ÃÜ ‚úÖ'
            
            await callback.message.answer(content)
        elif not bid_closed:
            content = f'–ó–∞–∫–∞–∑ ‚Ññ{bid_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–∏ÃÜ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.'
            
            await callback.message.answer(content)
        else:
            content = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üôÅ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            
            await callback.message.answer(content)
    elif callback.data.startswith('look_responses_'):
        bid_id = callback.data.split('_')[2]